module TrustGraph declares *
import "trust-graph.aqua"
import "trust-graph-api.aqua"

func add_root_trust_wrapped(node: string, max_chain_len: u32, expires_at_sec: u64) -> ?string:
    on node:
        error <- add_root_trust(max_chain_len, expires_at_sec)
    <- error

func add_root_wrapped(node: string, peer_id: string, max_chain_len: u32) -> AddRootResult:
    on node:
        result <- add_root(peer_id, max_chain_len)
    <- result

func get_weight_wrapped(node: string, peer_id: string) -> WeightResult:
    on node:
        result <- get_weight(peer_id)
    <- result

func issue_trust_wrapped(node: string, issued_for_peer_id: string, expires_at_sec: u64) -> ?Trust, ?string:
    on node:
        result, error <- issue_trust(issued_for_peer_id, expires_at_sec)
    <- result, error

func add_trust_wrapped(node: string, issued_for_peer_id: string, expires_at_sec: u64) -> ?string:
    on node:
        error <- add_trust(issued_for_peer_id, expires_at_sec)
    <- error

func import_trust_wrapped(node: string, trust: Trust) -> ?string:
    on node:
        error <- import_trust(trust)
    <- error

func verify_trust_wrapped(node: string, trust: Trust, issuer_peer_id: string) -> VerifyTrustResult:
    on node:
        result <- verify_trust(trust, issuer_peer_id)
    <- result

func issue_revocation_wrapped(node: string, revoked_peer_id: string) -> ?Revocation, ?string:
    on node:
        result, error <- issue_revocation(revoked_peer_id)
    <- result, error

func revoke_wrapped(node: string, revoked_peer_id: string) -> ?string:
    on node:
        error <- revoke(revoked_peer_id)
    <- error

func import_revocation_wrapped(node: string, revocation: Revocation) -> ?string:
    on node:
        error <- import_revocation(revocation)
    <- error

func get_host_certs_from_wrapped(node: string, issuer: string) -> AllCertsResult:
    on node:
        result <- get_host_certs_from(issuer)
    <- result

func get_all_certs_wrapped(node: string, issued_for: string) -> AllCertsResult:
    on node:
        result <- get_all_certs(issued_for)
    <- result

func get_host_certs_wrapped(node: string) -> AllCertsResult:
    on node:
        result <- get_host_certs()
    <- result

func insert_cert_wrapped(node: string, certificate: Certificate) -> InsertResult:
    on node:
        result <- insert_cert(certificate)
    <- result

func isFluencePeer_wrapped(node: string) -> ?bool, ?string:
    on node:
        result, error <- isFluencePeer()
    <- result, error
